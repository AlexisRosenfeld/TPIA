import math
import time

graph = {
    (0,0) : [((1,0),1), ((0,1),1)],
    (0,1) : [((0,0),1), ((1,1),1)],
    (0,3) : [((1,3),1), ((0,4),math.inf)],
    
    (1,0) : [((0,0),1), ((1,1),1)],
    (1,1) : [((0,1),1), ((1,0),1), ((2,1),1), ((1,2),1)],
    (1,2) : [((1,3),1), ((1,1),1)],
    (1,3) : [((1,2),1), ((1,4),1), ((0,3),1)],
    (1,4) : [((0,4),math.inf), ((2,4),1)],
    
    (2,1) : [((1,1),1), ((3,1),1)],
    (2,4) : [((1,4),1), ((3,4),1)],

    (3,0) : [((3,1),1), ((4,0),1)],
    (3,1) : [((3,0),1), ((2,1),1), ((4,1),1), ((3,2), math.inf)],
    (3,3) : [((3,4),1), ((4,3),1), ((3,2),math.inf)],
    (3,4) : [((2,4),1), ((3,3),1), ((4,4),1)],

    (4,0) : [((3,0),1), ((4,1),1)],
    (4,1) : [((4,0),1), ((3,1),1), ((4,2),1)],
    (4,2) : [((4,1),1), ((3,2),math.inf), ((4,3),1)],
    (4,3) : [((3,3),1), ((4,4),1), ((4,2),1)],
    (4,4) : [((4,4),1), ((4,3),1), ((3,4),1)],
}

def dfs_avec_count(graph, start, goal, count=0, path=None, visited=None):
    if path is None:
        path = []  
    if visited is None:
        visited = set()
        
    if start in visited:  # Éviter les boucles infinies
        return float('inf'), None
    
    path = path + [start]  
    visited.add(start)

    if start == goal:
        return count, path  

    min_cost = float('inf')
    best_path = None  

    for neighbor, cost in graph[start]:
        if cost == math.inf:  # Éviter les chemins impossibles
            continue
        
        path_cost, current_path = dfs_avec_count(graph, neighbor, goal, count + cost, path, visited.copy())
        if path_cost < min_cost:
            min_cost = path_cost
            best_path = current_path  

    return (min_cost, best_path) if best_path else (float('inf'), None)

start_time = time.time()
cost, path = dfs_avec_count(graph, (0,0), (3,4))
end_time = time.time()



if path:
    print(f"Le coût minimum pour atteindre le but est : {cost}")
    print(f"Le chemin suivi est : {' -> '.join(map(str, path))}")
    print(f"temps = {end_time - start_time}") 
else:
    print("Aucun chemin trouvé.")











def bfs(graph, start, goal):
# the queue contains all the paths we can expand upon.
# here we store for each element of the queue:
# - the current node to expand from
# - the full path
# - the cumulated path cost
    queue = [(start, [start], 0)]
    visited = set() # set to track visited nodes
    while queue:
    # we want to pick the node which comes first in alphabetic order
        queue.sort()
        node, path, cost = queue.pop(0) # get and remove the first element
        # we found the goal, return the path
        if node == goal:
            return path, cost
        if node not in visited:
            visited.add(node)
            for neighbor, weight in graph.get(node, []):
            # create a new path including the neighbor
                new_path = path + [neighbor]
                # enqueue new path with updated cost and new expandable node
                queue.append((neighbor, new_path, cost + weight))
    return None # No path found
start_time = time.time()
path, cost = bfs(graph, start=(0,0), goal=(3,4))
end_time = time.time()

print(f"Le coût pour atteindre le but est : {cost}")
print(f"Le chemin suivi est : {' -> '.join(map(str, path))}")
print(f"temps = {end_time - start_time}")













def heuristique(node, goal):
    """Calcul de la distance de Manhattan (heuristique) entre le nœud actuel et le but."""
    return abs(node[0] - goal[0]) + abs(node[1] - goal[1])

def bfs_with_heuristic(graph, start, goal):
    """Recherche en largeur avec une heuristique (un peu comme A*)."""
    
    # La queue contient (nœud actuel, chemin jusqu'ici, coût cumulé, heuristique)
    queue = [(start, [start], 0, heuristique(start, goal))]
    visited = set()  # Set pour suivre les nœuds déjà explorés

    while queue:
        # Trier la queue en fonction de l'heuristique + coût cumulé (f = g + h)
        queue.sort(key=lambda x: x[2] + x[3])  # Trier par f(n) = g(n) + h(n)
        
        node, path, cost, _ = queue.pop(0)  # Récupérer le premier élément de la queue
        
        # Si on a atteint le but, retourner le chemin et le coût
        if node == goal:
            return path, cost

        if node not in visited:
            visited.add(node)  # Marquer le nœud comme visité
            for neighbor, weight in graph.get(node, []):
                # Créer un nouveau chemin incluant le voisin
                new_path = path + [neighbor]
                # Ajouter le voisin à la queue avec le coût mis à jour
                queue.append((neighbor, new_path, cost + weight, heuristique(neighbor, goal)))

    return None  # Aucun chemin trouvé

start_time = time.time()
# Exécution de BFS avec heuristique pour trouver le chemin de (0, 0) à (3, 4)
path, cost = bfs_with_heuristic(graph, start=(0, 0), goal=(3, 4))
end_time = time.time()

if path:
    print(f"Le coût pour atteindre le but est : {cost}")
    print(f"Le chemin suivi est : {' -> '.join(map(str, path))}")
    print(f"temps = {end_time - start_time}")
else:
    print("Aucun chemin trouvé.")

